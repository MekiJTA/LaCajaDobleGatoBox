<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="FB_BeltControl" Id="{da1577ed-8fa5-451c-b384-ecb49194f3dd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_BeltControl
VAR_INPUT
	IN				: BOOL;
	IN_Run 			: BOOL; // Order to start running
	IN_Ready			: BOOL; // Safety ok, system ok, doors ok
	IN_Forward 			: BOOL;
	IN_Backward			: BOOL;
	VFD_Running		: BOOL;
	VFD_Ready		: BOOL;
	
END_VAR
VAR_OUTPUT
	Q : BOOL;
	VFD_14_RUN 	: BOOL;
	VFD_15_Forward		: BOOL;
	VFD_16_Backward		: BOOL;
	iStatus		: INT;
	iFault		: INT;
	sStatusMessage	: STRING;
END_VAR
VAR
	nMotorState: (NOT_READY, ALL_READY, RUNNING, STOP, ERROR);	//Local ENUM
	Stopping_TON: TON;
	sDirCase: (FORWARD, BACKWARD);
	Frw_Bck: INT;
	fbTcMessage: FB_TcMessage;	//Eventlogger messaging
		bIsInitialized : BOOL;
		bSendMessage : BOOL;
	
	iTempCounter: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[M_VariableChanges();
IF NOT IN_Ready THEN		// VFD signal of readiness. Simple way to work safely with VFD
	nMotorState :=0;
END_IF

CASE nMotorState OF
	NOT_READY:	
	sStatusMessage := 'Not ready. Stopped';
		IF IN_Ready THEN
		nMotorState := 1;	// When VFD signals it is ready, we can proceed
		END_IF

	ALL_READY:
	sStatusMessage := 'Ready to run. Motor Stopped';
		VFD_14_RUN := FALSE;
		VFD_15_Forward := FALSE;
		VFD_16_Backward := TRUE;
	
		IF IN_Run THEN		// Inputted signal from buttonbox or other remote to start
			nMotorState := 2;	// Move on to Running-state

			//Also send informational Eventlogger message:
			bIsInitialized := TRUE;
				IF bIsInitialized THEN
					bIsInitialized := FALSE;
					bSendMessage := TRUE;
					fbTcMessage.CreateEx(TC_Events.GatoPerroEvents.Start, 0);
				END_IF
			
		END_IF
		
	RUNNING:
							// Motor can either run forward or backward according to buttonbox switch
		CASE sDirCase  OF			
			BACKWARD:
				VFD_14_RUN := FALSE;
				VFD_15_Forward := TRUE;
				VFD_16_Backward := FALSE;
				sStatusMessage := 'Motor running: Backward';

			FORWARD:
				VFD_14_RUN := TRUE;
				VFD_15_Forward := FALSE;
				VFD_16_Backward := TRUE;
				sStatusMessage := 'Motor running: Forward';
		END_CASE

		IF NOT IN_Run THEN	
			nMotorState := 3;
		END_IF

	STOP:
		sStatusMessage := 'Stopping...';	// Motor is gradually stopped and slight delay is included before new start can be ordered
		VFD_14_RUN := FALSE;
		VFD_15_Forward := FALSE;
		VFD_16_Backward := TRUE;
		
		Stopping_TON(IN:=TRUE , PT:=T#2S , Q=> , ET=> );
			IF Stopping_TON.Q THEN
				Stopping_TON(IN:=FALSE);
				nMotorState := 0;
			END_IF
		
	ERROR:
		sStatusMessage := 'Error state';
	
		
END_CASE

A_Messaging();
]]></ST>
    </Implementation>
    <Action Name="A_Messaging" Id="{aa05c0ed-ce60-42cb-a1c2-83d4fdf44b19}">
      <Implementation>
        <ST><![CDATA[
//Sends tc eventlogger messages if it is primed previously

IF bSendMessage THEN
	bSendMessage := FALSE;
	iTempCounter := iTempCounter +1;
	fbTcMessage.Send(0);	// 0 = current timestamp
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_VariableChanges" Id="{25e58fda-e379-4634-b5e8-87a1ef140024}">
      <Declaration><![CDATA[METHOD M_VariableChanges : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IN 					:= Q;
VFD_15_Forward 		:= IN_Forward;
VFD_16_Backward 	:= IN_Backward;
iStatus 			:= nMotorState;
iFault 				:= 0;
Frw_Bck 			:= BOOL_TO_INT( IN_Forward);
sDirCase		 	:= Frw_Bck;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_BeltControl">
      <LineId Id="919" Count="0" />
      <LineId Id="921" Count="12" />
      <LineId Id="958" Count="0" />
      <LineId Id="960" Count="1" />
      <LineId Id="963" Count="0" />
      <LineId Id="934" Count="1" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1020" Count="0" />
      <LineId Id="1067" Count="0" />
      <LineId Id="1071" Count="3" />
      <LineId Id="1030" Count="0" />
      <LineId Id="1021" Count="0" />
      <LineId Id="936" Count="2" />
      <LineId Id="968" Count="0" />
      <LineId Id="964" Count="0" />
      <LineId Id="973" Count="0" />
      <LineId Id="980" Count="1" />
      <LineId Id="978" Count="0" />
      <LineId Id="988" Count="0" />
      <LineId Id="987" Count="0" />
      <LineId Id="975" Count="0" />
      <LineId Id="982" Count="1" />
      <LineId Id="979" Count="0" />
      <LineId Id="986" Count="0" />
      <LineId Id="971" Count="0" />
      <LineId Id="989" Count="0" />
      <LineId Id="965" Count="0" />
      <LineId Id="942" Count="3" />
      <LineId Id="993" Count="0" />
      <LineId Id="990" Count="1" />
      <LineId Id="946" Count="0" />
      <LineId Id="992" Count="0" />
      <LineId Id="947" Count="10" />
      <LineId Id="1032" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="1033" Count="0" />
    </LineIds>
    <LineIds Name="FB_BeltControl.A_Messaging">
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="1" />
    </LineIds>
    <LineIds Name="FB_BeltControl.M_VariableChanges">
      <LineId Id="15" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>